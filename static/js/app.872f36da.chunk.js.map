{"version":3,"sources":["styles/navigation/bottomTabStyles.ts","styles/colors.ts","components/navigation/BottomTabBar.tsx","styles/common/baseStyles.ts","components/layouts/Container.tsx","utils/api.ts","styles/stacks/posts/postItemStyles.ts","components/posts/PostItem.tsx","components/posts/PostList.tsx","styles/stacks/posts/searchStyles.ts","screens/SearchScreen.tsx","contexts/CurrentUserContext.tsx","components/helpers/Button.tsx","components/posts/PostImagePicker.tsx","styles/stacks/posts/postFormStyles.ts","screens/PostFormScreen.tsx","styles/forms/textInputStyles.ts","styles/stacks/auth/authScreenStyles.ts","screens/auth/AuthScreen.tsx","components/images/HeaderLogo.tsx","screens/PostDetailScreen.tsx","utils/router.tsx","screens/FeedScreen.tsx","screens/AccountScreen.tsx","utils/textFormatters.ts","screens/auth/AuthLoadingScreen.tsx","providers/CurrentUserProvider.tsx","App.tsx","web-build/register-service-worker.js","assets/memipedia-logo.png"],"names":["StyleSheet","create","container","position","bottom","zIndex","flexDirection","justifyContent","alignItems","width","height","backgroundColor","paddingBottom","props","View","style","bottomTabStyles","TouchableOpacity","onPress","navigate","MaterialCommunityIcons","name","color","size","Ionicons","containerWithBottomTabBar","marginBottom","baseStyles","children","BottomTabBar","axios","baseURL","itemWrapper","imageWrapper","contentWrapper","paddingLeft","paddingRight","contentText","fontSize","RFValue","postHeading","nameText","fontWeight","post","post_image_url","postItemStyles","Dimensions","get","source","uri","Text","ScrollView","refreshControl","RefreshControl","refreshing","isLoading","onRefresh","getPosts","tintColor","colors","posts","length","ActivityIndicator","map","key","id","handleItemPress","PostItem","searchFormContainer","padding","searchTextInput","borderRadius","searchIcon","searchStyles","CurrentUserContext","createContext","disabled","text","forwardRef","ref","useState","image","setImage","useImperativeHandle","clearImage","useEffect","getPermissionAsync","a","async","Constants","platform","ios","Permissions","status","alert","ImagePicker","mediaTypes","All","allowsEditing","aspect","quality","result","cancelled","setPostImage","console","log","Image","EvilIcons","formGrid","textInputWrapper","inputElement","borderBottomColor","borderBottomWidth","borderLeftColor","borderLeftWidth","textAreaElement","buttonWrapper","postFormStyles","textFieldWrapper","marginTop","textField","paddingTop","Contstants","statusBarHeight","textInputStyles","imgPath","require","AppStack","createStackNavigator","Feed","setPosts","setIsLoading","SecureStore","token","api","headers","Authorization","then","response","data","memipedia_posts","catch","error","Container","navigation","PostList","Search","query","setQuery","emptyQuery","setEmptyQuery","handleSearch","params","searchBar","TextInput","value","onChangeText","val","placeholder","onSubmitEditing","Account","setCurrentUser","useContext","Button","PostForm","imagePickerRef","useRef","setName","content","setContent","postImage","isSubmitting","setIsSubmitting","buildForm","formData","FormData","append","uriParts","split","fileType","type","PostImagePicker","multiline","Accept","memipedia_post","current","PostDetail","screen","state","navigationOptions","headerLeft","initialRouteName","defaultNavigationOptions","headerStyle","headerTintColor","headerTitle","HeaderLogo","AuthStack","Auth","formToShow","setFormToShow","email","setEmail","password","setPassword","getUser","handleLogin","auth","API","jwt","handleRegistration","user","errorList","memipedia_user","errors","Object","keys","join","handleSubmit","authScreenStyles","autoCapitalize","spellCheck","secureTextEntry","headerShown","createAppContainer","createSwitchNavigator","AuthLoading","checkLogin","App","currentUser","stateValues","Provider","AppContainer","router","CurrentUserProvider","StatusBar","barStyle","navigator","window","addEventListener","serviceWorker","register","scope","info","module","exports"],"mappings":"uPAGeA,MAAWC,OAAO,CAC/BC,UAAW,CACTC,SAAU,WACVC,OAAQ,EACRC,OAAQ,IACRC,cAAe,MACfC,eAAgB,eAChBC,WAAY,SACZC,MAAO,OACPC,OAAQ,GACRC,gBCZgB,UDahBC,cAAe,MEHJ,WAACC,GACd,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAgBd,WAC3B,kBAACe,EAAA,EAAD,CAAkBC,QAAS,kBAAML,EAAMM,SAAS,UAC9C,kBAACC,EAAA,EAAD,CAAwBC,KAAK,YAAYC,MAAM,QAAQC,KAAM,MAE/D,kBAACN,EAAA,EAAD,CAAkBC,QAAS,kBAAML,EAAMM,SAAS,YAC9C,kBAACK,EAAA,EAAD,CAAUH,KAAK,YAAYC,MAAM,QAAQC,KAAM,MAEjD,kBAACN,EAAA,EAAD,CAAkBC,QAAS,kBAAML,EAAMM,SAAS,cAC9C,kBAACC,EAAA,EAAD,CAAwBC,KAAK,cAAcC,MAAM,QAAQC,KAAM,MAEjE,kBAACN,EAAA,EAAD,CAAkBC,QAAS,kBAAML,EAAMM,SAAS,aAC9C,kBAACC,EAAA,EAAD,CAAwBC,KAAK,WAAWC,MAAM,QAAQC,KAAM,QCrBrDvB,MAAWC,OAAO,CAC/BC,UAAW,CACTQ,OAAQ,OACRC,gBFNmB,WEQrBc,0BAA2B,CACzBC,aAAc,MCEH,WAACb,GACd,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAOY,EAAWzB,WACrBW,EAAMe,SACP,kBAACC,EAAD,CAAcV,SAAUN,EAAMM,a,SCbrBW,E,OAAAA,EAAM7B,OAAO,CAC1B8B,QAAS,iD,2DCAI/B,MAAWC,OAAO,CAC/B+B,YAAa,CACXN,aAAc,IAEhBO,aAAc,CACZP,aAAc,IAEhBQ,eAAgB,CACdC,YAAa,GACbC,aAAc,IAEhBC,YAAa,CACXf,MAAO,QACPgB,SAAUC,YAAQ,GAAI,MAExBC,YAAa,CACXlC,cAAe,MACfC,eAAgB,gBAChBC,WAAY,UAEdiC,SAAU,CACRnB,MAAO,QACPgB,SAAUC,YAAQ,GAAI,KACtBG,WAAY,SCZD,WAAC7B,GAA2B,IAAD,EACPA,EAAM8B,KAA/BtB,EADgC,EAChCA,KAAMuB,EAD0B,EAC1BA,eAYd,OACE,kBAAC9B,EAAA,EAAD,CAAMC,MAAO8B,EAAeb,aAC1B,kBAAClB,EAAA,EAAD,CAAMC,MAAO8B,EAAeZ,cAT5B,kBAAC,IAAD,CACExB,MAAOqC,IAAWC,IAAI,UAAUtC,MAChCuC,OAAQ,CAAEC,IAAKL,MASjB,kBAAC9B,EAAA,EAAD,CAAMC,MAAO,CAAC8B,EAAeX,eAAgBW,EAAeL,cAC1D,kBAACU,EAAA,EAAD,CAAMnC,MAAO8B,EAAeJ,UAAWpB,MCfhC,WAACR,GAyBd,OACE,kBAACsC,EAAA,EAAD,CACEC,eACE,kBAACC,EAAA,EAAD,CACEC,WAAYzC,EAAM0C,UAClBC,UAXc,WAChB3C,EAAM4C,UACR5C,EAAM4C,YAUFC,UAAU,QACVC,OAAQ,CAAC,WAGb5C,MAAOY,EAAWF,2BA7BhBZ,EAAM0C,WAAoC,IAAvB1C,EAAM+C,MAAMC,OAC1B,kBAACC,EAAA,EAAD,CAAmBxC,MAAM,QAAQC,KAAK,UACpCV,EAAM+C,MAAMC,OAAS,EACvBhD,EAAM+C,MAAMG,KAAI,SAACpB,GAAD,OACrB,kBAAC1B,EAAA,EAAD,CAAkB+C,IAAKrB,EAAKsB,GAAI/C,QAAS,kBATvB,SAACyB,GACvB9B,EAAMM,SAAS,aAAc,CAAEwB,SAQoBuB,CAAgBvB,KAC7D,kBAACwB,EAAD,CAAUxB,KAAMA,QAIb,O,QC9BE3C,MAAWC,OAAO,CAC/BmE,oBAAqB,CACnBC,QAAS,GACT/D,cAAe,OAEjBgE,gBAAiB,CACf3D,gBAAiB,QACjBF,MAAO,MACP8D,aAAc,GACd7B,WAAY,MACZP,YAAa,IAEfqC,WAAY,CACVjE,eAAgB,SAChBC,WAAY,SACZC,MAAO,SCPH2D,EAAqDK,EAArDL,oBAAqBE,EAAgCG,EAAhCH,gBAAiBE,EAAeC,EAAfD,WCL/BE,EAFYC,wBAAmB,M,iBCQ/B,WAAC9D,GACd,OACE,kBAACI,EAAA,EAAD,KACEF,MAAO,CACLJ,gBAAiBE,EAAM+D,SXXN,UADA,UWajBlE,OAAQ,GACRH,eAAgB,SAChBC,WAAY,SACZ+D,aAAc,IAEZ1D,GAEJ,kBAACqC,EAAA,EAAD,CACEnC,MAAO,CACLO,MAAOT,EAAM+D,SXtBE,UWsBqB,QACpCtC,SAAU,GACVI,WAAY,QAGb7B,EAAMgE,Q,kDClBAC,wBAAW,SAACjE,EAA8BkE,GAAS,IAAD,EACrCC,mBAAS,MAD4B,WACxDC,EADwD,KACjDC,EADiD,KAG/DC,8BAAoBJ,GAAK,iBAAO,CAC9BK,WAD8B,WAE5BF,EAAS,WAIbG,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAqB,0BAAAC,EAAAC,OAAA,oDACrBC,IAAUC,SAASC,IADE,kCAAAJ,EAAA,MAEEK,IAAqBA,MAFvB,gBAGR,YAHQ,EAEfC,QAENC,MAAM,6DAJe,6DA4BrBvE,EAAO,CACXb,OAAQ,IACRD,MAAO,KAWT,OACE,gBAACQ,EAAA,EAAD,CACEC,QAlCc,0BAAAqE,EAAAC,OAAA,2EAAAD,EAAA,MAEUQ,IAAoC,CAC1DC,WAAYD,IAA6BE,IACzCC,eAAe,EACfC,OAAQ,CAAC,EAAG,GACZC,QAAS,KANG,QAEVC,EAFU,QAQFC,YACVpB,EAASmB,EAAOpD,KAChBpC,EAAM0F,aAAaF,EAAOpD,MAG5BuD,QAAQC,IAAIJ,GAbE,gDAedG,QAAQC,IAAR,MAfc,iEAmCd1F,MAAO,CACLQ,EACA,CACEhB,eAAgB,SAChBC,WAAY,YAddyE,EACK,gBAACyB,EAAA,EAAD,CAAO1D,OAAQ,CAAEC,IAAKgC,GAASlE,MAAOQ,IAEtC,gBAACoF,EAAA,EAAD,CAAWtF,KAAK,SAASC,MZ9Df,UY8D+BC,KAAM,SC3D7CvB,MAAWC,OAAO,CAC/BC,UAAW,CACTQ,OAAQ,QAEVkG,SAAU,CACRtG,cAAe,MACfoB,aAAc,IAEhBmF,iBAAkB,CAChBpG,MAAO,QAETqG,aAAc,CACZC,kBbXqB,UaYrBC,kBAAmB,EACnBC,gBbbqB,UacrBC,gBAAiB,EACjB7C,QAAS,GAEX8C,gBAAiB,CACfzG,OAAQ,IAEV0G,cAAe,CACbhF,aAAc,GACdD,YAAa,MCjBfjC,EAMEmH,EANFnH,UACA0G,EAKES,EALFT,SACAC,EAIEQ,EAJFR,iBACAC,GAGEO,EAHFP,aACAK,GAEEE,EAFFF,gBACAC,GACEC,EADFD,cCZapH,OAAWC,OAAO,CAC/BqH,iBAAkB,CAChBC,UAAW,GACX7F,aAAc,IAEhB8F,UAAW,CACT7G,gBAAiB,QACjB4D,aAAc,GACd7D,OAAQ,GACRyB,YAAa,MCPFnC,OAAWC,OAAO,CAC/BC,UAAW,CACTS,gBhBLgB,UgBMhB0D,QAAS,GACT3D,OAAQ,OACR+G,WAAYC,IAAWC,mBCEnBL,GAAgCM,GAAhCN,iBAAkBE,GAAcI,GAAdJ,UCRpBK,GAAUC,EAAQ,KAET,cACb,OAAO,kBAACpB,EAAA,EAAD,CAAO1D,OAAQ6E,GAAS9G,MAAO,CAAEL,OAAQ,GAAID,MAAO,OCArDyB,GAAgCW,EAAhCX,eAAgBG,GAAgBQ,EAAhBR,YCUlB0F,GAAWC,YACf,CACEC,KCLW,SAACpH,GAA6B,IAAD,EAChBmE,mBAAS,IADO,WACnCpB,EADmC,KAC5BsE,EAD4B,OAERlD,oBAAS,GAFD,WAEnCzB,EAFmC,KAExB4E,EAFwB,KAI1C9C,qBAAU,WACR5B,MACC,IAEH,IAAMA,EAAW,0BAAA8B,EAAAC,OAAA,kEAAAD,EAAA,MACK6C,IAAyB,2BAD9B,OACTC,EADS,OAGfF,GAAa,GAEbG,EACGvF,IAAI,kBAAmB,CACtBwF,QAAS,CACPC,cAAc,UAAWH,KAG5BI,MAAK,SAACC,GACLR,EAASQ,EAASC,KAAKC,iBACvBT,GAAa,MAEdU,OAAM,SAACC,GACNtC,QAAQC,IAAI,mBAAoBqC,GAChCX,GAAa,MAjBF,6DAqBjB,OACE,kBAACY,EAAD,CAAW5H,SAAUN,EAAMmI,WAAW7H,UACpC,kBAACL,EAAA,EAAD,KACE,kBAACmI,EAAD,CACE1F,UAAWA,EACXE,SAAUA,EACVG,MAAOA,EACPzC,SAAUN,EAAMmI,WAAW7H,cD9BjC+H,OXFW,SAACrI,GAA+B,IAAD,EAClBmE,mBAAS,IADS,WACrCmE,EADqC,KAC9BC,EAD8B,OAElBpE,mBAAS,IAFS,WAErCpB,EAFqC,KAE9BsE,EAF8B,OAGVlD,oBAAS,GAHC,WAGrCzB,EAHqC,KAG1B4E,EAH0B,OAIRnD,oBAAS,GAJD,WAIrCqE,EAJqC,KAIzBC,EAJyB,KAMtCC,EAAe,8BAAAhE,EAAAC,OAAA,kEAAAD,EAAA,MACC6C,IAAyB,2BAD1B,OACbC,EADa,OAEnBF,GAAa,GACbmB,GAAc,GAERE,EAAS,CACbL,SAGIZ,EAAU,CACdC,cAAc,UAAWH,GAG3BC,EACGvF,IAAI,oBAAqB,CACxByG,SACAjB,YAEDE,MAAK,SAACC,GACwC,IAAzCA,EAASC,KAAKC,gBAAgB/E,QAChCyF,GAAc,GAEhBpB,EAASQ,EAASC,KAAKC,iBACvBT,GAAa,MAEdU,OAAM,SAACC,GACNX,GAAa,GACbrC,MAAM,0BA3BS,6DA+Bf2D,EACJ,kBAAC3I,EAAA,EAAD,CAAMC,MAAOqD,GACX,kBAACsF,EAAA,EAAD,CACEC,MAAOR,EACPS,aAAc,SAACC,GAAD,OAAST,EAASS,IAChCC,YAAY,oBACZC,gBAAiBR,EACjBxI,MAAOuD,IAGT,kBAACrD,EAAA,EAAD,CAAkBF,MAAOyD,EAAYtD,QAASqI,GAC5C,kBAAC/H,EAAA,EAAD,CAAUH,KAAK,YAAYC,MAAM,QAAQC,KAAM,OA4BrD,OACE,kBAACwH,EAAD,CAAW5H,SAAUN,EAAMmI,WAAW7H,UACnCsI,EAxBCJ,EAEA,kBAACvI,EAAA,EAAD,CAAMC,MAAO,CAAEqB,aAAc,GAAID,YAAa,KAC5C,kBAACe,EAAA,EAAD,CAAMnC,MAAO,CAAEO,MAAO,UAAtB,6CAKKsC,GAASA,EAAMC,OAAS,EAE/B,kBAACoF,EAAD,CACExF,SAAU8F,EACVhG,UAAWA,EACXK,MAAOA,EACPzC,SAAUN,EAAMmI,WAAW7H,WAIxB,OWrET6I,QERW,SAACnJ,GAAgC,IACtCoJ,EAAmBC,qBAAWxF,GAA9BuF,eAQR,OACE,kBAACnJ,EAAA,EAAD,CAAMC,MAAO,CAAEsD,QAAS,KACtB,kBAAC8F,EAAD,CAAQjJ,QARU,oBAAAqE,EAAAC,OAAA,kEAAAD,EAAA,MACd6C,IAA4B,2BADd,OAEpB6B,EAAe,MACfpJ,EAAMmI,WAAW7H,SAAS,QAHN,6DAQc0D,KAAK,eFFvCuF,SNCW,SAACvJ,GACd,IAAMwJ,EAAsBC,mBADkB,EAEtBtF,mBAAS,IAFa,WAEvC3D,EAFuC,KAEjCkJ,EAFiC,OAGhBvF,mBAAS,IAHO,WAGvCwF,EAHuC,KAG9BC,EAH8B,OAIZzF,mBAAS,MAJG,WAIvC0F,EAJuC,KAI5BnE,EAJ4B,OAKNvB,oBAAS,GALH,WAKvC2F,EALuC,KAKzBC,EALyB,KAexCC,EAAY,WAChB,IAAIC,EAAW,IAAIC,SAEnBD,EAASE,OAAO,aAAc3J,GAC9ByJ,EAASE,OAAO,gBAAiBR,GAEjC,IAAMS,EAAWP,EAAUQ,MAAM,KAC3BC,EAAWF,EAASA,EAASpH,OAAS,GAS5C,OAPAiH,EAASE,OAAO,mBAAoB,CAElC/H,IAAKyH,EACLrJ,KAAK,SAAU8J,EACfC,KAAK,SAAUD,IAGVL,GAkCT,OACE,kBAAC3H,EAAA,EAAD,CAAYpC,MAAOb,GACjB,kBAACY,EAAA,EAAD,CAAMC,MAAO6F,GACX,kBAACyE,EAAD,CAAiBtG,IAAKsF,EAAgB9D,aAAcA,IAEpD,kBAACzF,EAAA,EAAD,CAAMC,MAAO8F,GACX,kBAAC6C,EAAA,EAAD,CACEI,YAAY,OACZH,MAAOtI,EACPuI,aAAc,SAACC,GAAD,OAASU,EAAQV,IAC/B9I,MAAO+F,KAGT,kBAAC4C,EAAA,EAAD,CACEI,YAAY,4BACZH,MAAOa,EACPZ,aAAc,SAACC,GAAD,OAASY,EAAWZ,IAClC9I,MAAO,CAAC+F,GAAcK,IACtBmE,WAAS,MAKf,kBAACxK,EAAA,EAAD,CAAMC,MAAOqG,IACVuD,EACC,kBAACR,EAAD,CAAQtF,KAAK,gBAAgBD,UAAQ,IAErC,kBAACuF,EAAD,CAAQtF,KAAK,SAAS3D,QA1DT,0BAAAqE,EAAAC,OAAA,kEAAAD,EAAA,MACC6C,IAAyB,2BAD1B,OACbC,EADa,OAEnBuC,GAAgB,GAEhBtC,EACG3F,KAAK,kBAAmBkI,IAAa,CACpCtC,QAAS,CACPC,cAAc,UAAWH,EACzBkD,OAAQ,mBACR,eAAgB,yBAGnB9C,MAAK,SAACC,GACDA,EAASC,KAAK6C,gBAvCtBnB,EAAeoB,QAAQrG,aACvBmF,EAAQ,IACRE,EAAW,IACXlE,EAAa,MACbqE,GAAgB,GAqCV/J,EAAMmI,WAAW7H,SAAS,aAAc,CACtCwB,KAAM+F,EAASC,KAAK6C,mBAGtBZ,GAAgB,GAChB9E,MACE,mGAIL+C,OAAM,SAACC,GACNtC,QAAQC,IAAI,+BAAgCqC,GAC5C8B,GAAgB,MA3BD,kEMlCnBc,WAAY,CACVC,ODCS,SAAC9K,GAAmC,IACzC8B,EAAS9B,EAAMmI,WAAW4C,MAAMpC,OAAhC7G,KACR,OACE,kBAACoG,EAAD,CAAW5H,SAAUN,EAAMmI,WAAW7H,UACpC,kBAACgC,EAAA,EAAD,KACE,kBAACgB,EAAD,CAAUxB,KAAMA,IAEhB,kBAAC7B,EAAA,EAAD,CAAMC,MAAOmB,IACX,kBAACgB,EAAA,EAAD,CAAMnC,MAAOsB,IAAcM,EAAK6H,aCRpCqB,kBAAmB,CACjBC,WAAY,kBAAM,SAIxB,CACEC,iBAAkB,OAClBC,yBAA0B,CACxBC,YAAa,CACXtL,gBpBhCY,WoBkCduL,gBAAiB,OACjBC,YAAa,kBAAM,kBAACC,GAAD,UAKnBC,GAAYrE,YAChB,CACEsE,KHnBW,SAACzL,GAA6B,IAAD,EACNmE,mBAAS,SADH,WACnCuH,EADmC,KACvBC,EADuB,OAEhBxH,mBAAS,IAFO,WAEnCyH,EAFmC,KAE5BC,EAF4B,OAGV1H,mBAAS,IAHC,WAGnC2H,EAHmC,KAGzBC,EAHyB,OAIF5H,oBAAS,GAJP,WAInC2F,EAJmC,KAIrBC,EAJqB,KAMlCiC,EAAY3C,qBAAWxF,GAAvBmI,QA0BFC,EAAc,WAClB,IAAMtD,EAAS,CACbuD,KAAM,CACJN,MAAOA,EACPE,SAAUA,IAGdK,EAAIrK,KAAK,uBAAwB6G,GAC9Bf,MAAK,SAAOC,GAAP,SAAAnD,EAAAC,OAAA,oDACAkD,EAASC,KAAKsE,IADd,kCAAA1H,EAAA,MAEI6C,IACJ,yBACAM,EAASC,KAAKsE,MAJd,OAMFJ,IACAjC,GAAgB,GAChB/J,EAAMmI,WAAW7H,SAAS,QARxB,uBAUFyJ,GAAgB,GAChB9E,MACE,4EAZA,gEAgBL+C,OAAM,SAACC,GACN8B,GAAgB,GAChB9E,MACE,gFAKFoH,EAAqB,WACzB,IAAM1D,EAAS,CACb2D,KAAM,CACJV,MAAOA,EACPE,SAAUA,IAGdK,EAAIrK,KAAK,kBAAmB6G,GACzBf,MAAK,SAACC,GMhGe,IAAC0E,ENiGrB5G,QAAQC,IAAI,wBAAyBiC,EAASC,MAC1CD,EAASC,KAAK0E,eAChBP,KAEAlC,GAAgB,GAChB9E,MAAM,4BMtGasH,ENuGuB1E,EAASC,KAAK2E,OMtG3CC,OAAOC,KAAKJ,GAAWrJ,KAAI,SAAAC,GAAG,MAAK,CACtDA,IAAKA,EACL2F,MAAOyD,EAAUpJ,OAG8BD,KAAI,SAAA1C,GACnD,OAAUA,EAAK2C,IAAf,KAAuB3C,EAAKsI,MAAM8D,KAAK,SAGlBA,KAAK,YNiGvB5E,OAAM,SAACC,GACN8B,GAAgB,GAChB9E,MAAM,mCAIN4H,EAAe,WACnB9C,GAAgB,GAEG,UAAf2B,EACFO,IAEAI,KAIJ,OACE,kBAAC/J,EAAA,EAAD,CAAYpC,MAAO4M,GAAiBzN,WAClC,kBAACY,EAAA,EAAD,CAAMC,MAAOuG,IACX,kBAACoC,EAAA,EAAD,CACEI,YAAY,QACZH,MAAO8C,EACP7C,aAAc,SAACC,GAAD,OAAS6C,EAAS7C,IAChC9I,MAAOyG,GACPoG,eAAe,OACfC,YAAY,KAIhB,kBAAC/M,EAAA,EAAD,CAAMC,MAAOuG,IACX,kBAACoC,EAAA,EAAD,CACEI,YAAY,WACZH,MAAOgD,EACP/C,aAAc,SAACC,GAAD,OAAS+C,EAAY/C,IACnC9I,MAAOyG,GACPsG,iBAAiB,EACjB/D,gBAAiB2D,KAIrB,kBAACzM,EAAA,EAAD,CACEF,MAAO,CAAEwG,UAAW,GAAI7F,aAAc,IACtCR,QA7GsB,WACP,UAAfqL,EACFC,EAAc,YACU,aAAfD,GACTC,EAAc,WA2GZ,kBAACtJ,EAAA,EAAD,CAAMnC,MAAO,CAAEO,MAAO,UAtHP,UAAfiL,EACK,4BACiB,aAAfA,EACF,sCADF,IAuHJ5B,EACC,kBAACR,EAAD,CAAQtF,KAAM,gBAAiBD,UAAQ,IAEvC,kBAACuF,EAAD,CAAQtF,KA5GO,UAAf0H,EACK,QACiB,aAAfA,EACF,gBADF,EA0GyBrL,QAASwM,OGhH3C,CACE3B,iBAAkB,OAClBC,yBAA0B,CACxB+B,aAAa,KAKJC,gCACbC,gCACE,CACEC,YI3CS,SAACrN,GAAoC,IAC1CoJ,EAAmBC,qBAAWxF,GAA9BuF,eAER5E,qBAAU,WACR8I,MACC,IAEH,IAAMA,EAAa,0BAAA5I,EAAAC,OAAA,kEAAAD,EAAA,MACG6C,IAAyB,2BAD5B,OACXC,EADW,OAGjB7B,QAAQC,IAAI,6CAER4B,EACFC,EACGvF,IAAI,YAAa,CAChBwF,QAAS,CACPC,cAAc,UAAWH,KAG5BI,MAAK,SAACC,GACLlC,QAAQC,IAAI,2BAA4BiC,EAASC,MAE7CD,EAASC,KAAK0E,gBAChBpD,EAAevB,EAASC,KAAK0E,gBAC7BxM,EAAMmI,WAAW7H,SAAS,SAE1B8I,EAAe,MACfpJ,EAAMmI,WAAW7H,SAAS,YAG7B0H,OAAM,SAACC,GACNmB,EAAe,MACfpJ,EAAMmI,WAAW7H,SAAS,YAG9B8I,EAAe,MACfpJ,EAAMmI,WAAW7H,SAAS,SA7BX,6DAiCnB,OAAO,kBAACL,EAAA,EAAD,OJIHsN,IAAKrG,GACLuE,KAAMD,IAER,CACEN,iBAAkB,iBKnDT,YAAClL,GAAsC,IAAD,EACbmE,mBAAS,CAC7Cf,GAAI,IACJwI,MAAO,gBAH0C,WAC5C4B,EAD4C,KAC/BpE,EAD+B,KA6B7CqE,EAAc,CAClBD,cACApE,iBACA4C,QA1Bc,0BAAAtH,EAAAC,OAAA,kEAAAD,EAAA,MACM6C,IAAyB,2BAD/B,OACRC,EADQ,OAGdC,EACGvF,IAAI,YAAa,CAChBwF,QAAS,CACPC,cAAc,UAAWH,KAG5BI,MAAK,SAACC,GACLlC,QAAQC,IAAI,wBAAyBiC,EAASC,MAE1CD,EAASC,KAAK0E,eAChBpD,EAAevB,EAASC,KAAK0E,gBAE7BpD,EAAe,SAGlBpB,OAAM,SAACC,GACNmB,EAAe,SAnBL,8DA6BhB,OACE,kBAAC,EAAmBsE,SAApB,CAA6B5E,MAAO2E,GACjCzN,EAAMe,WCzCP4M,GAAeR,6BAAmBS,IAEzB,SAASL,KACtB,OACE,kBAACM,GAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,kBACpB,kBAACJ,GAAD,S,+DCVF,kBAAmBK,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,mEAAoE,CAAEC,MAAO,+CACtFzG,MAAK,SAAU0G,OAGftG,OAAM,SAAUC,GACftC,QAAQ2I,KAAK,oCAAqCrG,U,oBCV1DsG,EAAOC,QAAU,IAA0B,6C","file":"static/js/app.872f36da.chunk.js","sourcesContent":["import { StyleSheet } from \"react-native\";\r\nimport { dark } from \"../colors\";\r\n\r\nexport default StyleSheet.create({\r\n  container: {\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    zIndex: 1000,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n    height: 80,\r\n    backgroundColor: dark,\r\n    paddingBottom: 15\r\n  }\r\n});\r\n","export const primary = \"#33363a\";\r\nexport const dark = \"#1f2125\";\r\nexport const warning = \"#ac262b\";\r\nexport const highlight = \"#eb523c\";\r\nexport const lightGrey = \"#EAEAEA\";\r\n","import React from \"react\";\r\nimport { View, TouchableOpacity, Text } from \"react-native\";\r\nimport MaterialCommunityIcons from \"react-native-vector-icons/MaterialCommunityIcons\";\r\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\r\n\r\nimport bottomTabStyles from \"../../styles/navigation/bottomTabStyles\";\r\n\r\ninterface IBottomTabBarProps {\r\n  navigate: (arg: string) => void;\r\n}\r\n\r\nexport default (props: IBottomTabBarProps) => {\r\n  return (\r\n    <View style={bottomTabStyles.container}>\r\n      <TouchableOpacity onPress={() => props.navigate(\"Feed\")}>\r\n        <MaterialCommunityIcons name=\"newspaper\" color=\"white\" size={30} />\r\n      </TouchableOpacity>\r\n      <TouchableOpacity onPress={() => props.navigate(\"Search\")}>\r\n        <Ionicons name=\"md-search\" color=\"white\" size={30} />\r\n      </TouchableOpacity>\r\n      <TouchableOpacity onPress={() => props.navigate(\"PostForm\")}>\r\n        <MaterialCommunityIcons name=\"plus-circle\" color=\"white\" size={30} />\r\n      </TouchableOpacity>\r\n      <TouchableOpacity onPress={() => props.navigate(\"Account\")}>\r\n        <MaterialCommunityIcons name=\"settings\" color=\"white\" size={30} />\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n","import { primary } from \"./../colors\";\r\nimport { StyleSheet } from \"react-native\";\r\n\r\nexport default StyleSheet.create({\r\n  container: {\r\n    height: \"100%\",\r\n    backgroundColor: primary,\r\n  },\r\n  containerWithBottomTabBar: {\r\n    marginBottom: 80,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nimport BottomTabBar from \"../navigation/BottomTabBar\";\r\nimport baseStyles from \"../../styles/common/baseStyles\";\r\n\r\ninterface IContainerProps {\r\n  children: any;\r\n  navigate: (arg: string) => void;\r\n}\r\n\r\nexport default (props: IContainerProps) => {\r\n  return (\r\n    <View style={baseStyles.container}>\r\n      {props.children}\r\n      <BottomTabBar navigate={props.navigate} />\r\n    </View>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://reactnative.devcamp.space/memipedia/\"\r\n});\r\n","import { StyleSheet } from \"react-native\";\r\nimport { RFValue } from \"react-native-responsive-fontsize\";\r\n\r\nexport default StyleSheet.create({\r\n  itemWrapper: {\r\n    marginBottom: 20,\r\n  },\r\n  imageWrapper: {\r\n    marginBottom: 15,\r\n  },\r\n  contentWrapper: {\r\n    paddingLeft: 15,\r\n    paddingRight: 15,\r\n  },\r\n  contentText: {\r\n    color: \"white\",\r\n    fontSize: RFValue(14, 680),\r\n  },\r\n  postHeading: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  nameText: {\r\n    color: \"white\",\r\n    fontSize: RFValue(20, 680),\r\n    fontWeight: \"900\",\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { View, Text, Dimensions } from \"react-native\";\r\nimport AutoHeightImage from \"react-native-auto-height-image\";\r\n\r\nimport postItemStyles from \"../../styles/stacks/posts/postItemStyles\";\r\n\r\ninterface IPostItemProps {\r\n  post: {\r\n    id: number;\r\n    name: string;\r\n    post_image_url: string;\r\n  };\r\n}\r\n\r\nexport default (props: IPostItemProps) => {\r\n  const { name, post_image_url } = props.post;\r\n\r\n  const img = () => {\r\n    return (\r\n      // @ts-ignore\r\n      <AutoHeightImage\r\n        width={Dimensions.get(\"window\").width}\r\n        source={{ uri: post_image_url }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <View style={postItemStyles.itemWrapper}>\r\n      <View style={postItemStyles.imageWrapper}>{img()}</View>\r\n\r\n      <View style={[postItemStyles.contentWrapper, postItemStyles.postHeading]}>\r\n        <Text style={postItemStyles.nameText}>{name}</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  RefreshControl,\r\n  ActivityIndicator,\r\n} from \"react-native\";\r\nimport PostItem from \"./PostItem\";\r\nimport baseStyles from \"../../styles/common/baseStyles\";\r\n\r\ninterface IPostListProps {\r\n  posts: any;\r\n  navigate: (screenName: string, data: any) => void;\r\n  getPosts?: () => void;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport default (props: IPostListProps) => {\r\n  const handleItemPress = (post) => {\r\n    props.navigate(\"PostDetail\", { post });\r\n  };\r\n\r\n  const postsRenderer = () => {\r\n    if (props.isLoading && props.posts.length === 0) {\r\n      return <ActivityIndicator color=\"white\" size=\"large\" />;\r\n    } else if (props.posts.length > 0) {\r\n      return props.posts.map((post) => (\r\n        <TouchableOpacity key={post.id} onPress={() => handleItemPress(post)}>\r\n          <PostItem post={post} />\r\n        </TouchableOpacity>\r\n      ));\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    if (props.getPosts) {\r\n      props.getPosts();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ScrollView\r\n      refreshControl={\r\n        <RefreshControl\r\n          refreshing={props.isLoading}\r\n          onRefresh={handleRefresh}\r\n          tintColor=\"white\"\r\n          colors={[\"white\"]}\r\n        />\r\n      }\r\n      style={baseStyles.containerWithBottomTabBar}\r\n    >\r\n      {postsRenderer()}\r\n    </ScrollView>\r\n  );\r\n};\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport default StyleSheet.create({\r\n  searchFormContainer: {\r\n    padding: 15,\r\n    flexDirection: \"row\",\r\n  },\r\n  searchTextInput: {\r\n    backgroundColor: \"white\",\r\n    width: \"85%\",\r\n    borderRadius: 25,\r\n    fontWeight: \"500\",\r\n    paddingLeft: 21,\r\n  },\r\n  searchIcon: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"15%\",\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { View, TextInput, TouchableOpacity, Text } from \"react-native\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\nimport Container from \"../components/layouts/Container\";\r\nimport api from \"../utils/api\";\r\nimport PostList from \"../components/posts/PostList\";\r\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\r\n\r\nimport searchStyles from \"../styles/stacks/posts/searchStyles\";\r\n\r\nconst { searchFormContainer, searchTextInput, searchIcon } = searchStyles;\r\n\r\ninterface ISearchScreenProps {\r\n  navigation: {\r\n    navigate: (arg: string) => void;\r\n  };\r\n}\r\nexport default (props: ISearchScreenProps) => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [posts, setPosts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [emptyQuery, setEmptyQuery] = useState(false);\r\n\r\n  const handleSearch = async () => {\r\n    const token = await SecureStore.getItemAsync(\"memipedia_secure_token\");\r\n    setIsLoading(true);\r\n    setEmptyQuery(false);\r\n\r\n    const params = {\r\n      query,\r\n    };\r\n\r\n    const headers = {\r\n      Authorization: `Bearer ${token}`,\r\n    };\r\n\r\n    api\r\n      .get(\"memipedia_queries\", {\r\n        params,\r\n        headers,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.memipedia_posts.length === 0) {\r\n          setEmptyQuery(true);\r\n        }\r\n        setPosts(response.data.memipedia_posts);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        alert(\"Error running query\");\r\n      });\r\n  };\r\n\r\n  const searchBar = (\r\n    <View style={searchFormContainer}>\r\n      <TextInput\r\n        value={query}\r\n        onChangeText={(val) => setQuery(val)}\r\n        placeholder=\"Search for a meme\"\r\n        onSubmitEditing={handleSearch}\r\n        style={searchTextInput}\r\n      />\r\n\r\n      <TouchableOpacity style={searchIcon} onPress={handleSearch}>\r\n        <Ionicons name=\"md-search\" color=\"white\" size={30} />\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n\r\n  const queryRenderer = () => {\r\n    if (emptyQuery) {\r\n      return (\r\n        <View style={{ paddingRight: 15, paddingLeft: 15 }}>\r\n          <Text style={{ color: \"white\" }}>\r\n            There were no posts matching your search\r\n          </Text>\r\n        </View>\r\n      );\r\n    } else if (posts && posts.length > 0) {\r\n      return (\r\n        <PostList\r\n          getPosts={handleSearch}\r\n          isLoading={isLoading}\r\n          posts={posts}\r\n          navigate={props.navigation.navigate}\r\n        />\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container navigate={props.navigation.navigate}>\r\n      {searchBar}\r\n\r\n      {queryRenderer()}\r\n    </Container>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { createContext } from \"react\";\r\n\r\nconst CurrentUserContext = createContext<any>(null);\r\n\r\nexport default CurrentUserContext;\r\n","import React from \"react\";\r\nimport { Text, TouchableOpacity } from \"react-native\";\r\n\r\nimport { highlight, lightGrey } from \"../../styles/colors\";\r\n\r\ninterface IButtonProps {\r\n  text: string;\r\n  onPress?: any;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport default (props: IButtonProps) => {\r\n  return (\r\n    <TouchableOpacity\r\n      style={{\r\n        backgroundColor: props.disabled ? lightGrey : highlight,\r\n        height: 40,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        borderRadius: 3,\r\n      }}\r\n      {...props}\r\n    >\r\n      <Text\r\n        style={{\r\n          color: props.disabled ? highlight : \"white\",\r\n          fontSize: 20,\r\n          fontWeight: \"700\",\r\n        }}\r\n      >\r\n        {props.text}\r\n      </Text>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\r\nimport { TouchableOpacity, Image } from \"react-native\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport Constants from \"expo-constants\";\r\nimport * as Permissions from \"expo-permissions\";\r\nimport EvilIcons from \"react-native-vector-icons/EvilIcons\";\r\nimport { primary } from \"../../styles/colors\";\r\n\r\ninterface IPostImagePickerProps {\r\n  setPostImage: (arg: any) => void;\r\n}\r\nexport default forwardRef((props: IPostImagePickerProps, ref) => {\r\n  const [image, setImage] = useState(null);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    clearImage() {\r\n      setImage(null);\r\n    },\r\n  }));\r\n\r\n  useEffect(() => {\r\n    getPermissionAsync();\r\n  }, []);\r\n\r\n  const getPermissionAsync = async () => {\r\n    if (Constants.platform.ios) {\r\n      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\r\n      if (status !== \"granted\") {\r\n        alert(\"Sorry, we need camera roll permissions to make this work!\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const pickImage = async () => {\r\n    try {\r\n      let result: any = await ImagePicker.launchImageLibraryAsync({\r\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n        allowsEditing: true,\r\n        aspect: [4, 3],\r\n        quality: 1,\r\n      });\r\n      if (!result.cancelled) {\r\n        setImage(result.uri);\r\n        props.setPostImage(result.uri);\r\n      }\r\n\r\n      console.log(result);\r\n    } catch (E) {\r\n      console.log(E);\r\n    }\r\n  };\r\n\r\n  const size = {\r\n    height: 100,\r\n    width: 100,\r\n  };\r\n\r\n  const contentRenderer = () => {\r\n    if (image) {\r\n      return <Image source={{ uri: image }} style={size} />;\r\n    } else {\r\n      return <EvilIcons name=\"camera\" color={primary} size={42} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      onPress={pickImage}\r\n      style={[\r\n        size,\r\n        {\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        },\r\n      ]}\r\n    >\r\n      {contentRenderer()}\r\n    </TouchableOpacity>\r\n  );\r\n});\r\n","import { lightGrey } from \"./../../colors\";\r\nimport { StyleSheet } from \"react-native\";\r\n\r\nexport default StyleSheet.create({\r\n  container: {\r\n    height: \"100%\",\r\n  },\r\n  formGrid: {\r\n    flexDirection: \"row\",\r\n    marginBottom: 20,\r\n  },\r\n  textInputWrapper: {\r\n    width: \"100%\",\r\n  },\r\n  inputElement: {\r\n    borderBottomColor: lightGrey,\r\n    borderBottomWidth: 1,\r\n    borderLeftColor: lightGrey,\r\n    borderLeftWidth: 1,\r\n    padding: 3,\r\n  },\r\n  textAreaElement: {\r\n    height: 76,\r\n  },\r\n  buttonWrapper: {\r\n    paddingRight: 15,\r\n    paddingLeft: 15,\r\n  },\r\n});\r\n","import React, { useState, useRef } from \"react\";\r\nimport { View, TextInput, ScrollView } from \"react-native\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\n\r\nimport api from \"../utils/api\";\r\nimport PostImagePicker from \"../components/posts/PostImagePicker\";\r\nimport Button from \"../components/helpers/Button\";\r\nimport postFormStyles from \"../styles/stacks/posts/postFormStyles\";\r\nconst {\r\n  container,\r\n  formGrid,\r\n  textInputWrapper,\r\n  inputElement,\r\n  textAreaElement,\r\n  buttonWrapper,\r\n} = postFormStyles;\r\n\r\ninterface IPostFormScreenProps {\r\n  navigation: {\r\n    navigate: (screenName: string, data: any) => void;\r\n  };\r\n}\r\nexport default (props: IPostFormScreenProps) => {\r\n  const imagePickerRef: any = useRef();\r\n  const [name, setName] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [postImage, setPostImage] = useState(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const setBaseState = () => {\r\n    imagePickerRef.current.clearImage();\r\n    setName(\"\");\r\n    setContent(\"\");\r\n    setPostImage(null);\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  const buildForm = () => {\r\n    let formData = new FormData();\r\n\r\n    formData.append(\"post[name]\", name);\r\n    formData.append(\"post[content]\", content);\r\n\r\n    const uriParts = postImage.split(\".\");\r\n    const fileType = uriParts[uriParts.length - 1];\r\n\r\n    formData.append(\"post[post_image]\", {\r\n      // @ts-ignore\r\n      uri: postImage,\r\n      name: `photo.${fileType}`,\r\n      type: `image/${fileType}`,\r\n    });\r\n\r\n    return formData;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const token = await SecureStore.getItemAsync(\"memipedia_secure_token\");\r\n    setIsSubmitting(true);\r\n\r\n    api\r\n      .post(\"memipedia_posts\", buildForm(), {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data.memipedia_post) {\r\n          setBaseState();\r\n          props.navigation.navigate(\"PostDetail\", {\r\n            post: response.data.memipedia_post,\r\n          });\r\n        } else {\r\n          setIsSubmitting(false);\r\n          alert(\r\n            \"There was an issue creating the post, all fields are required, and only images are allowed.\"\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error from creating new post\", error);\r\n        setIsSubmitting(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={container}>\r\n      <View style={formGrid}>\r\n        <PostImagePicker ref={imagePickerRef} setPostImage={setPostImage} />\r\n\r\n        <View style={textInputWrapper}>\r\n          <TextInput\r\n            placeholder=\"Name\"\r\n            value={name}\r\n            onChangeText={(val) => setName(val)}\r\n            style={inputElement}\r\n          />\r\n\r\n          <TextInput\r\n            placeholder=\"Add meme explanation here\"\r\n            value={content}\r\n            onChangeText={(val) => setContent(val)}\r\n            style={[inputElement, textAreaElement]}\r\n            multiline\r\n          />\r\n        </View>\r\n      </View>\r\n\r\n      <View style={buttonWrapper}>\r\n        {isSubmitting ? (\r\n          <Button text=\"Submitting...\" disabled />\r\n        ) : (\r\n          <Button text=\"Submit\" onPress={handleSubmit} />\r\n        )}\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport default StyleSheet.create({\r\n  textFieldWrapper: {\r\n    marginTop: 20,\r\n    marginBottom: 20\r\n  },\r\n  textField: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: 20,\r\n    height: 40,\r\n    paddingLeft: 20\r\n  }\r\n});\r\n","import { dark } from \"./../../colors\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport Contstants from \"expo-constants\";\r\n\r\nexport default StyleSheet.create({\r\n  container: {\r\n    backgroundColor: dark,\r\n    padding: 15,\r\n    height: \"100%\",\r\n    paddingTop: Contstants.statusBarHeight,\r\n  },\r\n});\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\n\r\nimport textInputStyles from \"../../styles/forms/textInputStyles\";\r\nconst { textFieldWrapper, textField } = textInputStyles;\r\nimport authScreenStyles from \"../../styles/stacks/auth/authScreenStyles\";\r\nimport API from \"../../utils/api\";\r\nimport Button from \"../../components/helpers/Button\";\r\nimport { formatErrors } from \"../../utils/textFormatters\";\r\n\r\nimport CurrentUserContext from \"../../contexts/CurrentUserContext\";\r\n\r\ninterface IAuthScreenProps {\r\n  navigation: {\r\n    navigate: (arg: string) => void;\r\n  };\r\n}\r\nexport default (props: IAuthScreenProps) => {\r\n  const [formToShow, setFormToShow] = useState(\"LOGIN\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const { getUser } = useContext(CurrentUserContext);\r\n\r\n  const screenTypeText = () => {\r\n    if (formToShow === \"LOGIN\") {\r\n      return \"Need an account? Register\";\r\n    } else if (formToShow === \"REGISTER\") {\r\n      return \"Already have an account? Login\";\r\n    }\r\n  };\r\n\r\n  const handleAuthTypePress = () => {\r\n    if (formToShow === \"LOGIN\") {\r\n      setFormToShow(\"REGISTER\");\r\n    } else if (formToShow === \"REGISTER\") {\r\n      setFormToShow(\"LOGIN\");\r\n    }\r\n  };\r\n\r\n  const buttonText = () => {\r\n    if (formToShow === \"LOGIN\") {\r\n      return \"Login\";\r\n    } else if (formToShow === \"REGISTER\") {\r\n      return \"Register\";\r\n    }\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const params = {\r\n      auth: {\r\n        email: email,\r\n        password: password,\r\n      },\r\n    };\r\n    API.post(\"memipedia_user_token\", params)\r\n      .then(async (response) => {\r\n        if (response.data.jwt) {\r\n          await SecureStore.setItemAsync(\r\n            \"memipedia_secure_token\",\r\n            response.data.jwt\r\n          );\r\n          getUser();\r\n          setIsSubmitting(false);\r\n          props.navigation.navigate(\"Feed\");\r\n        } else {\r\n          setIsSubmitting(false);\r\n          alert(\r\n            \"It looks like you typed in the wrong email or password, please try again\"\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setIsSubmitting(false);\r\n        alert(\r\n          \"It looks like you typed in the wrong email or password, please try again\"\r\n        );\r\n      });\r\n  };\r\n\r\n  const handleRegistration = () => {\r\n    const params = {\r\n      user: {\r\n        email: email,\r\n        password: password,\r\n      },\r\n    };\r\n    API.post(\"memipedia_users\", params)\r\n      .then((response) => {\r\n        console.log(\"Res for creating user\", response.data);\r\n        if (response.data.memipedia_user) {\r\n          handleLogin();\r\n        } else {\r\n          setIsSubmitting(false);\r\n          alert(\r\n            `Error creating account: ${formatErrors(response.data.errors)}`\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setIsSubmitting(false);\r\n        alert(\"Error creating user account\");\r\n      });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    setIsSubmitting(true);\r\n\r\n    if (formToShow === \"LOGIN\") {\r\n      handleLogin();\r\n    } else {\r\n      handleRegistration();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={authScreenStyles.container}>\r\n      <View style={textFieldWrapper}>\r\n        <TextInput\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          onChangeText={(val) => setEmail(val)}\r\n          style={textField}\r\n          autoCapitalize=\"none\"\r\n          spellCheck={false}\r\n        />\r\n      </View>\r\n\r\n      <View style={textFieldWrapper}>\r\n        <TextInput\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChangeText={(val) => setPassword(val)}\r\n          style={textField}\r\n          secureTextEntry={true}\r\n          onSubmitEditing={handleSubmit}\r\n        />\r\n      </View>\r\n\r\n      <TouchableOpacity\r\n        style={{ marginTop: 10, marginBottom: 20 }}\r\n        onPress={handleAuthTypePress}\r\n      >\r\n        <Text style={{ color: \"white\" }}>{screenTypeText()}</Text>\r\n      </TouchableOpacity>\r\n\r\n      {isSubmitting ? (\r\n        <Button text={\"Submitting...\"} disabled />\r\n      ) : (\r\n        <Button text={buttonText()} onPress={handleSubmit} />\r\n      )}\r\n    </ScrollView>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Image } from \"react-native\";\r\n\r\nconst imgPath = require(\"../../assets/memipedia-logo.png\");\r\n\r\nexport default () => {\r\n  return <Image source={imgPath} style={{ height: 30, width: 29 }} />;\r\n};\r\n","import React from \"react\";\r\nimport { View, Text, ScrollView } from \"react-native\";\r\nimport PostItem from \"../components/posts/PostItem\";\r\nimport Container from \"../components/layouts/Container\";\r\n\r\nimport postItemStyles from \"../styles/stacks/posts/postItemStyles\";\r\nconst { contentWrapper, contentText } = postItemStyles;\r\n\r\ninterface IPostDetailScreenProps {\r\n  navigation: {\r\n    navigate: any;\r\n    state: {\r\n      params: {\r\n        post: {\r\n          id: number;\r\n          name: string;\r\n          content: string;\r\n          post_image_url: string;\r\n        };\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nexport default (props: IPostDetailScreenProps) => {\r\n  const { post } = props.navigation.state.params;\r\n  return (\r\n    <Container navigate={props.navigation.navigate}>\r\n      <ScrollView>\r\n        <PostItem post={post} />\r\n\r\n        <View style={contentWrapper}>\r\n          <Text style={contentText}>{post.content}</Text>\r\n        </View>\r\n      </ScrollView>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { createAppContainer, createSwitchNavigator } from \"react-navigation\";\r\nimport { createStackNavigator } from \"react-navigation-stack\";\r\n\r\nimport FeedScreen from \"../screens/FeedScreen\";\r\nimport SearchScreen from \"../screens/SearchScreen\";\r\nimport AccountScreen from \"../screens/AccountScreen\";\r\nimport PostFormScreen from \"../screens/PostFormScreen\";\r\nimport AuthScreen from \"../screens/auth/AuthScreen\";\r\nimport AuthLoadingScreen from \"../screens/auth/AuthLoadingScreen\";\r\n\r\nimport HeaderLogo from \"../components/images/HeaderLogo\";\r\n\r\nimport { dark } from \"../styles/colors\";\r\nimport PostDetailScreen from \"../screens/PostDetailScreen\";\r\n\r\nconst AppStack = createStackNavigator(\r\n  {\r\n    Feed: FeedScreen,\r\n    Search: SearchScreen,\r\n    Account: AccountScreen,\r\n    PostForm: PostFormScreen,\r\n    PostDetail: {\r\n      screen: PostDetailScreen,\r\n      navigationOptions: {\r\n        headerLeft: () => null,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    initialRouteName: \"Feed\",\r\n    defaultNavigationOptions: {\r\n      headerStyle: {\r\n        backgroundColor: dark,\r\n      },\r\n      headerTintColor: \"#fff\",\r\n      headerTitle: () => <HeaderLogo />,\r\n    },\r\n  }\r\n);\r\n\r\nconst AuthStack = createStackNavigator(\r\n  {\r\n    Auth: AuthScreen,\r\n  },\r\n  {\r\n    initialRouteName: \"Auth\",\r\n    defaultNavigationOptions: {\r\n      headerShown: false,\r\n    },\r\n  }\r\n);\r\n\r\nexport default createAppContainer(\r\n  createSwitchNavigator(\r\n    {\r\n      AuthLoading: AuthLoadingScreen,\r\n      App: AppStack,\r\n      Auth: AuthStack,\r\n    },\r\n    {\r\n      initialRouteName: \"AuthLoading\",\r\n    }\r\n  )\r\n);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\n\r\nimport Container from \"../components/layouts/Container\";\r\nimport api from \"../utils/api\";\r\nimport PostList from \"../components/posts/PostList\";\r\n\r\ninterface IFeedScreenProps {\r\n  navigation: {\r\n    navigate: (screenName: string, data?: any) => void;\r\n  };\r\n}\r\nexport default (props: IFeedScreenProps) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  const getPosts = async () => {\r\n    const token = await SecureStore.getItemAsync(\"memipedia_secure_token\");\r\n\r\n    setIsLoading(true);\r\n\r\n    api\r\n      .get(\"memipedia_posts\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPosts(response.data.memipedia_posts);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error from posts\", error);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Container navigate={props.navigation.navigate}>\r\n      <View>\r\n        <PostList\r\n          isLoading={isLoading}\r\n          getPosts={getPosts}\r\n          posts={posts}\r\n          navigate={props.navigation.navigate}\r\n        />\r\n      </View>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\n\r\nimport CurrentUserContext from \"../contexts/CurrentUserContext\";\r\nimport Button from \"../components/helpers/Button\";\r\n\r\ninterface IAccountScreenProps {\r\n  navigation: {\r\n    navigate: (arg: string) => void;\r\n  };\r\n}\r\nexport default (props: IAccountScreenProps) => {\r\n  const { setCurrentUser } = useContext(CurrentUserContext);\r\n\r\n  const handleSignOut = async () => {\r\n    await SecureStore.deleteItemAsync(\"memipedia_secure_token\");\r\n    setCurrentUser(null);\r\n    props.navigation.navigate(\"Auth\");\r\n  };\r\n\r\n  return (\r\n    <View style={{ padding: 15 }}>\r\n      <Button onPress={handleSignOut} text=\"Sign Out\" />\r\n    </View>\r\n  );\r\n};\r\n","export const formatErrors = (errorList: any) => {\r\n  const errorContent = Object.keys(errorList).map(key => ({\r\n    key: key,\r\n    value: errorList[key]\r\n  }));\r\n\r\n  const formattedErrors: Array<any> = errorContent.map(name => {\r\n    return `${name.key}: ${name.value.join(\", \")}`;\r\n  });\r\n\r\n  return formattedErrors.join(\", \");\r\n};\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\n\r\nimport CurrentUserContext from \"../../contexts/CurrentUserContext\";\r\nimport api from \"../../utils/api\";\r\n\r\ninterface IAuthLoadingScreenProps {\r\n  navigation: {\r\n    navigate: (screenName: string) => void;\r\n  };\r\n}\r\n\r\nexport default (props: IAuthLoadingScreenProps) => {\r\n  const { setCurrentUser } = useContext(CurrentUserContext);\r\n\r\n  useEffect(() => {\r\n    checkLogin();\r\n  }, []);\r\n\r\n  const checkLogin = async () => {\r\n    const token = await SecureStore.getItemAsync(\"memipedia_secure_token\");\r\n\r\n    console.log(\"In check login in the auth loading screen\");\r\n\r\n    if (token) {\r\n      api\r\n        .get(\"logged_in\", {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          console.log(\"response form checklogin\", response.data);\r\n\r\n          if (response.data.memipedia_user) {\r\n            setCurrentUser(response.data.memipedia_user);\r\n            props.navigation.navigate(\"App\");\r\n          } else {\r\n            setCurrentUser(null);\r\n            props.navigation.navigate(\"Auth\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          setCurrentUser(null);\r\n          props.navigation.navigate(\"Auth\");\r\n        });\r\n    } else {\r\n      setCurrentUser(null);\r\n      props.navigation.navigate(\"Auth\");\r\n    }\r\n  };\r\n\r\n  return <View />;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\nimport CurrentUserContext from \"../contexts/CurrentUserContext\";\r\n\r\nimport api from \"../utils/api\";\r\n\r\ninterface ICurrentUserProviderProps {\r\n  children: any;\r\n}\r\n\r\nexport default (props: ICurrentUserProviderProps) => {\r\n  const [currentUser, setCurrentUser] = useState({\r\n    id: 123,\r\n    email: \"hey@you.com\",\r\n  });\r\n\r\n  const getUser = async () => {\r\n    const token = await SecureStore.getItemAsync(\"memipedia_secure_token\");\r\n\r\n    api\r\n      .get(\"logged_in\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(\"response from getUser\", response.data);\r\n\r\n        if (response.data.memipedia_user) {\r\n          setCurrentUser(response.data.memipedia_user);\r\n        } else {\r\n          setCurrentUser(null);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setCurrentUser(null);\r\n      });\r\n  };\r\n\r\n  const stateValues = {\r\n    currentUser,\r\n    setCurrentUser,\r\n    getUser,\r\n  };\r\n\r\n  return (\r\n    <CurrentUserContext.Provider value={stateValues}>\r\n      {props.children}\r\n    </CurrentUserContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { StatusBar } from \"react-native\";\n\nimport router from \"./utils/router\";\nimport { createAppContainer } from \"react-navigation\";\nimport CurrentUserProvider from \"./providers/CurrentUserProvider\";\nconst AppContainer = createAppContainer(router);\n\nexport default function App() {\n  return (\n    <CurrentUserProvider>\n      <StatusBar barStyle=\"light-content\" />\n      <AppContainer />\n    </CurrentUserProvider>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/maria72865/md-react-native-memipedia.git/expo-service-worker.js', { scope: '/maria72865/md-react-native-memipedia.git/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/memipedia-logo.8791171f.png\";"],"sourceRoot":""}